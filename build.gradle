plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '2.7.8'
	// id 'io.spring.dependency-management' version '1.1.0'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.diffplug.eclipse.apt' version '3.40.0' 
	// id 'org.asciidoctor.convert' version '2.4.0'
	id 'org.asciidoctor.convert' version '1.5.8'
  // id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "com.github.ryarnyah.querydsl" version "0.0.3"
}

bootJar{ enabled = false}
bootWar{ enabled = false}
jar{ enabled = false}
war{ enabled = true}

group = 'cdb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

// def querydslDir = "$buildDir/generated/querydsl"
// querydsl {
//     jpa = true
//     querydslSourcesDir = querydslDir
// }
// sourceSets {
//     main.java.srcDir querydslDir
// }
// configurations {
//     querydsl.extendsFrom compileClasspath
// }
// compileQuerydsl {
//     options.annotationProcessorPath = configurations.querydsl
// }

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springBootAdminVersion', "2.7.4")
	set('springCloudVersion', "2021.0.5")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	// implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	// implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	// implementation 'org.springframework.session:spring-session-core'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	//db
	// runtimeOnly 'com.h2database:h2'
	// runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'


	//webjars
	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.webjars:jquery:3.6.1' 
	implementation 'org.webjars:jquery-ui:1.13.2' 
	implementation 'org.webjars:bootstrap:5.1.3'
	implementation 'org.webjars:AdminLTE:3.2.0'
	implementation 'org.webjars:fullcalendar:5.11.3'
	implementation 'org.webjars:dropzone:5.9.2'
	implementation 'org.webjars:popper.js:2.9.3'

  //한국어 형태소 분석기
	implementation 'com.github.shin285:KOMORAN:3.3.4'

	//querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
	annotationProcessor 'javax.annotation:javax.annotation-api'
	annotationProcessor 'javax.persistence:javax.persistence-api'
	// implementation 'com.querydsl:querydsl-jpa:${querydslVersion}'
	// annotationProcessor 'com.querydsl:querydsl-apt:${querydslVersion}'

	//utilities
	implementation 'commons-io:commons-io:2.11.0'
	implementation 'org.apache.poi:poi-ooxml:5.2.3'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

  //mapstruct+lombok+mapstruct-spring-extensions
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	annotationProcessor 'org.projectlombok:lombok'
	// implementation 'org.mapstruct.extensions.spring:mapstruct-spring-annotations:0.1.2'
	// annotationProcessor 'org.mapstruct.extensions.spring:mapstruct-spring-extensions:0.1.2'
	// testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.withType(JavaCompile) { 
	options.compilerArgs = [ 
			'-Amapstruct.defaultComponentModel=spring'
		] 
}

tasks.register('ensureDirectory') {
  doLast {

	def javaPath = "src/main/java/${project.name}/"
	def mvcList = ["controller/rest/","service/impl/","domain/","etc/","configuration/security/","utilities/"/* ,"","","" */]
	def domainList = ["dto/","entity/","etc/","repository/"]
	def resourcesPath = ["src/main/resources/static/","src/main/resources/templates/"]
	def resList = ["js/","css/","images/"]
	def commons = ["common/","layout/","etc/","fragment"]

			project.mkdir ".github/workflows/"
			project.mkdir "scripts/"
			println ".github/workflows/"
			println "scripts/"
		for(mvc in mvcList){
			project.mkdir "$javaPath$mvc"
			println "$javaPath$mvc"
		}
		for(domain in domainList){
			project.mkdir "$javaPath${mvcList[2]}$domain"
			println "$javaPath${mvcList[2]}$domain"
		}
		for(res in resList){
			for (int i = 0; i < commons.size()-2; i++) {
			project.mkdir "${resourcesPath[0]}$res${commons[i]}"
			println "${resourcesPath[0]}$res${commons[i]}"
			}
		}
		for(com in commons){
			project.mkdir "${resourcesPath[1]}$com"
			println "${resourcesPath[1]}$com"
		}

  }

}

